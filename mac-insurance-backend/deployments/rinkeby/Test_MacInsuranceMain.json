{
  "address": "0x4010952C7601211e62812a6BcbeD7ACda12E4AEE",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "EndDateEarlierThanStartDate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsuranceAlreadyRequested",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsuranceInActivePeriod",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LiquidtyAlreadyWithdrawn",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughInsuranceLiquidity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughTokenBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PoolIdNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReimburesementAlreadyReceived",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReimburesementRequirementNotMet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RequesterUnauthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "poolId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "insuranceRequester",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidtyToInsure",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "InsuranceRequestCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "poolId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "basePrice",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "tresholdPrice",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "fee",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidityAdded",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startDate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endDate",
          "type": "uint256"
        }
      ],
      "name": "PoolUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_id",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "getReimbursement",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_id",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "getUserFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "id",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceFeed",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "_insuranceLossCoverage",
          "type": "int256"
        },
        {
          "internalType": "uint8",
          "name": "_fee",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_startDateFromDeployInSeconds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endDateFromDeployInSeconds",
          "type": "uint256"
        }
      ],
      "name": "initPool",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "id",
              "type": "uint16"
            },
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "totalLiquidity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "priceLossCover",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "basePrice",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "insuranceTreshold",
              "type": "int256"
            },
            {
              "internalType": "uint8",
              "name": "fee",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "startDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endDate",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.PoolData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "insuranceRequests",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "id",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "insuranceRequester",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidtyToInsure",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reimbursementAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "reimbursementReceived",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "liquiditySupplyList",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "id",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "liquidityProvider",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidityAdded",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "liquidityWithdrawn",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "poolDataList",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "id",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalLiquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "priceLossCover",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "basePrice",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "insuranceTreshold",
          "type": "int256"
        },
        {
          "internalType": "uint8",
          "name": "fee",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "startDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endDate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_id",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "requestInsurance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_id",
          "type": "uint16"
        }
      ],
      "name": "requestReimbursement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_id",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "supplyPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "testTokenPrice",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "_updatedPrice",
          "type": "int256"
        }
      ],
      "name": "updatePriceToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_id",
          "type": "uint16"
        }
      ],
      "name": "withdrawPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x820d3b0e603f5333254a972e6ef1e8de332125d03a3a25a9b421f9e4e805c531",
  "receipt": {
    "to": null,
    "from": "0xFB0aC8078982C876E894E35F5890652886b8c88B",
    "contractAddress": "0x4010952C7601211e62812a6BcbeD7ACda12E4AEE",
    "transactionIndex": 11,
    "gasUsed": "2435911",
    "logsBloom": "0x
    "blockHash": "0xfd82a18b806e66aa8fb1b3a1da9cadbf2ce972ad830bb574f35ed645c99b4710",
    "transactionHash": "0x820d3b0e603f5333254a972e6ef1e8de332125d03a3a25a9b421f9e4e805c531",
    "logs": [],
    "blockNumber": 10767218,
    "cumulativeGasUsed": "3761485",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "46af64d5d25fd52bbc3319495fa21fc7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"EndDateEarlierThanStartDate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsuranceAlreadyRequested\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsuranceInActivePeriod\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LiquidtyAlreadyWithdrawn\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughInsuranceLiquidity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughTokenBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolIdNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReimburesementAlreadyReceived\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReimburesementRequirementNotMet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RequesterUnauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"poolId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"insuranceRequester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidtyToInsure\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"InsuranceRequestCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"poolId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"basePrice\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"tresholdPrice\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"fee\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityAdded\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"}],\"name\":\"PoolUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_id\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getReimbursement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_id\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getUserFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"id\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"_insuranceLossCoverage\",\"type\":\"int256\"},{\"internalType\":\"uint8\",\"name\":\"_fee\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_startDateFromDeployInSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endDateFromDeployInSeconds\",\"type\":\"uint256\"}],\"name\":\"initPool\",\"outputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"id\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceLossCover\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"basePrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"insuranceTreshold\",\"type\":\"int256\"},{\"internalType\":\"uint8\",\"name\":\"fee\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.PoolData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"insuranceRequests\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"id\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"insuranceRequester\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidtyToInsure\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reimbursementAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"reimbursementReceived\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquiditySupplyList\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"id\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"liquidityProvider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityAdded\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"liquidityWithdrawn\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"poolDataList\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"id\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceLossCover\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"basePrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"insuranceTreshold\",\"type\":\"int256\"},{\"internalType\":\"uint8\",\"name\":\"fee\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_id\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"requestInsurance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_id\",\"type\":\"uint16\"}],\"name\":\"requestReimbursement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_id\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"supplyPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testTokenPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_updatedPrice\",\"type\":\"int256\"}],\"name\":\"updatePriceToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_id\",\"type\":\"uint16\"}],\"name\":\"withdrawPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test/Test_MacInsuranceMain.sol\":\"Test_MacInsuranceMain\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"contracts/libraries/DataTypes.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nlibrary DataTypes {\\r\\n    struct PoolData {\\r\\n        // id of the pool\\r\\n        uint16 id;\\r\\n        // the address token used\\r\\n        address tokenAddress;\\r\\n        // total liquidity locked in the pool by investor\\r\\n        uint256 totalLiquidity;\\r\\n        //percentage of price loss cover\\r\\n        uint256 priceLossCover;\\r\\n        // token price when the liquidity was supplied\\r\\n        int256 basePrice;\\r\\n        // token price treshold. Beyond this price, the insurer will pay the price difference between token price and treshold\\r\\n        int256 insuranceTreshold;\\r\\n        // the percentage of fee to require this pool insurance\\r\\n        uint8 fee;\\r\\n        // beginning of insurance active period\\r\\n        uint256 startDate;\\r\\n        // end of insurance active period\\r\\n        uint256 endDate;\\r\\n    }\\r\\n\\r\\n    struct PoolLiquiditySupply {\\r\\n        // id of the pool\\r\\n        uint16 id;\\r\\n        // investor who supplied liquidity\\r\\n        address liquidityProvider;\\r\\n        // token amount invested in the insurance pool\\r\\n        uint256 liquidityAdded;\\r\\n        // boolean value to register when user has withdrawn liquidity\\r\\n        bool liquidityWithdrawn;\\r\\n    }\\r\\n\\r\\n    struct InsuranceRequest {\\r\\n        // id of the pool\\r\\n        uint16 id;\\r\\n        // investor who requested insurance\\r\\n        address insuranceRequester;\\r\\n        // token amount to be insured\\r\\n        uint256 liquidtyToInsure;\\r\\n        // token amount paid to the insured when the insurance conditions are met\\r\\n        uint256 reimbursementAmount;\\r\\n        // token amount paid to the providers for the insurance\\r\\n        uint256 fee;\\r\\n        // boolean value to register when user has received the reimbursement\\r\\n        bool reimbursementReceived;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x35bb135aae48d2ac95a1702eba37a54aa525b16872ab6fe7a22ebd7f60b80099\",\"license\":\"MIT\"},\"contracts/libraries/Errors.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nlibrary Errors {\\r\\n    error PoolIdNotExist();\\r\\n    error NotEnoughInsuranceLiquidity();\\r\\n    error NotEnoughTokenBalance();\\r\\n    error InsuranceAlreadyRequested();\\r\\n    error ReimburesementRequirementNotMet();\\r\\n    error EndDateEarlierThanStartDate();\\r\\n    error InsuranceInActivePeriod();\\r\\n    error LiquidtyAlreadyWithdrawn();\\r\\n    error ReimburesementAlreadyReceived();\\r\\n    error TransferFailed();\\r\\n    error RequesterUnauthorized();\\r\\n}\\r\\n\",\"keccak256\":\"0xccd7fa2bdc5bdd76f20682425d337782d6391d914d3003dca785b053adb1d7b3\",\"license\":\"MIT\"},\"contracts/test/Test_MacInsuranceMain.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport {DataTypes} from \\\"../libraries/DataTypes.sol\\\";\\r\\nimport {Errors} from \\\"../libraries/Errors.sol\\\";\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ncontract Test_MacInsuranceMain {\\r\\n    uint16 public id;\\r\\n    int256 public testTokenPrice = 1000000000;\\r\\n    address tokenAddress;\\r\\n    AggregatorV3Interface internal priceFeed;\\r\\n    IERC20 internal insuredToken;\\r\\n\\r\\n    mapping(uint16 => DataTypes.PoolData) public poolDataList;\\r\\n    mapping(uint16 => mapping(address => DataTypes.PoolLiquiditySupply))\\r\\n        public liquiditySupplyList;\\r\\n    mapping(uint16 => mapping(address => DataTypes.InsuranceRequest))\\r\\n        public insuranceRequests;\\r\\n\\r\\n    event PoolUpdated(\\r\\n        uint16 poolId,\\r\\n        address tokenAddress,\\r\\n        int256 basePrice,\\r\\n        int256 tresholdPrice,\\r\\n        uint8 fee,\\r\\n        uint256 liquidityAdded,\\r\\n        uint256 startDate,\\r\\n        uint256 endDate\\r\\n    );\\r\\n\\r\\n    event InsuranceRequestCreated(\\r\\n        uint16 poolId,\\r\\n        address tokenAddress,\\r\\n        address insuranceRequester,\\r\\n        uint256 liquidtyToInsure,\\r\\n        uint256 fee\\r\\n    );\\r\\n\\r\\n    constructor() {\\r\\n        id = 0;\\r\\n    }\\r\\n\\r\\n    modifier existPool(uint16 _id) {\\r\\n        if (_id > id) {\\r\\n            revert Errors.PoolIdNotExist();\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function getLatestPrice() internal view returns (int256) {\\r\\n        (\\r\\n            ,\\r\\n            /*uint80 roundID*/\\r\\n            int256 price, /*uint startedAt*/ /*uint timeStamp*/ /*uint80 answeredInRound*/\\r\\n            ,\\r\\n            ,\\r\\n\\r\\n        ) = priceFeed.latestRoundData();\\r\\n        return price;\\r\\n    }\\r\\n\\r\\n    function updatePriceToken(int256 _updatedPrice) public {\\r\\n        testTokenPrice = _updatedPrice;\\r\\n    }\\r\\n\\r\\n    function getUserFee(uint16 _id, uint256 _amount)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 totalLiquidity = poolDataList[_id].totalLiquidity;\\r\\n        uint16 fee = poolDataList[_id].fee;\\r\\n        uint256 f = (totalLiquidity * uint256(fee)) / 100;\\r\\n\\r\\n        // userFee = (amountToInsure / TVL) * max fee\\r\\n        uint256 userFee = (_amount * f) / totalLiquidity;\\r\\n        return userFee;\\r\\n    }\\r\\n\\r\\n    function getReimbursement(uint16 _id, uint256 _amount)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        // step1: calculate the 20% amount\\r\\n        //amount - (amount / 100 * loss cover)\\r\\n        //step2:\\r\\n        //(amount - step1) * amount / step1\\r\\n        uint256 priceLossCover = poolDataList[_id].priceLossCover;\\r\\n        uint256 priceDiff = _amount - ((_amount / 100) * priceLossCover);\\r\\n        uint256 reimbursementAmount = ((_amount - priceDiff) * _amount) /\\r\\n            priceDiff;\\r\\n        return reimbursementAmount;\\r\\n    }\\r\\n\\r\\n    function initPool(\\r\\n        address _tokenAddress,\\r\\n        address _priceFeed,\\r\\n        int256 _insuranceLossCoverage,\\r\\n        uint8 _fee,\\r\\n        uint256 _startDateFromDeployInSeconds,\\r\\n        uint256 _endDateFromDeployInSeconds\\r\\n    ) public returns (DataTypes.PoolData memory) {\\r\\n        // initiating the required variable for the ERC20 transfers\\r\\n        priceFeed = AggregatorV3Interface(_priceFeed);\\r\\n        insuredToken = IERC20(_tokenAddress);\\r\\n        tokenAddress = _tokenAddress;\\r\\n\\r\\n        // time inputs created and checck that start date is not later than future\\r\\n        uint256 startDate = block.timestamp +\\r\\n            _startDateFromDeployInSeconds *\\r\\n            1 seconds;\\r\\n        uint256 endDate = block.timestamp +\\r\\n            _endDateFromDeployInSeconds *\\r\\n            1 seconds;\\r\\n        if (endDate <= startDate) {\\r\\n            revert Errors.EndDateEarlierThanStartDate();\\r\\n        }\\r\\n\\r\\n        DataTypes.PoolData memory pool;\\r\\n        // retrieving the token price from the oracle\\r\\n        int256 tokenPrice = testTokenPrice;\\r\\n        int256 insuranceTreshold = tokenPrice -\\r\\n            ((tokenPrice / 100) * _insuranceLossCoverage);\\r\\n\\r\\n        pool.id = id;\\r\\n        pool.tokenAddress = tokenAddress;\\r\\n        pool.priceLossCover = uint256(_insuranceLossCoverage);\\r\\n        pool.basePrice = tokenPrice;\\r\\n        pool.insuranceTreshold = insuranceTreshold;\\r\\n        pool.fee = _fee;\\r\\n        pool.startDate = startDate;\\r\\n        pool.endDate = endDate;\\r\\n\\r\\n        // make the pool traceable by adding it in the mapping\\r\\n        poolDataList[id] = pool;\\r\\n\\r\\n        emit PoolUpdated(\\r\\n            id,\\r\\n            tokenAddress,\\r\\n            tokenPrice,\\r\\n            insuranceTreshold,\\r\\n            _fee,\\r\\n            0,\\r\\n            startDate,\\r\\n            endDate\\r\\n        );\\r\\n\\r\\n        // the id is increased by one after success\\r\\n        id += 1;\\r\\n        return (pool);\\r\\n    }\\r\\n\\r\\n    function supplyPool(uint16 _id, uint256 _amount)\\r\\n        public\\r\\n        existPool(_id)\\r\\n        returns (uint256)\\r\\n    {\\r\\n        if (block.timestamp >= poolDataList[_id].startDate) {\\r\\n            revert Errors.InsuranceInActivePeriod();\\r\\n        }\\r\\n\\r\\n        DataTypes.PoolLiquiditySupply memory poolSupply;\\r\\n\\r\\n        //transfering insured token to this contract and TVL updated\\r\\n        bool success = insuredToken.transferFrom(\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            _amount\\r\\n        );\\r\\n        if (success) {\\r\\n            poolDataList[_id].totalLiquidity += _amount;\\r\\n        } else {\\r\\n            revert Errors.TransferFailed();\\r\\n        }\\r\\n\\r\\n        poolSupply.id = _id;\\r\\n        poolSupply.liquidityProvider = msg.sender;\\r\\n        poolSupply.liquidityAdded = _amount;\\r\\n\\r\\n        liquiditySupplyList[_id][msg.sender] = poolSupply;\\r\\n\\r\\n        emit PoolUpdated(\\r\\n            _id,\\r\\n            poolDataList[_id].tokenAddress,\\r\\n            poolDataList[_id].basePrice,\\r\\n            poolDataList[_id].insuranceTreshold,\\r\\n            poolDataList[_id].fee,\\r\\n            poolDataList[_id].totalLiquidity,\\r\\n            poolDataList[_id].startDate,\\r\\n            poolDataList[_id].endDate\\r\\n        );\\r\\n\\r\\n        return (poolDataList[_id].totalLiquidity);\\r\\n    }\\r\\n\\r\\n    function withdrawPool(uint16 _id) public existPool(_id) {\\r\\n        if (\\r\\n            liquiditySupplyList[_id][msg.sender].liquidityProvider != msg.sender\\r\\n        ) {\\r\\n            revert Errors.RequesterUnauthorized();\\r\\n        }\\r\\n\\r\\n        if (block.timestamp <= poolDataList[_id].endDate) {\\r\\n            revert Errors.InsuranceInActivePeriod();\\r\\n        }\\r\\n\\r\\n        if (liquiditySupplyList[_id][msg.sender].liquidityWithdrawn == true) {\\r\\n            revert Errors.LiquidtyAlreadyWithdrawn();\\r\\n        }\\r\\n\\r\\n        uint256 withdrawAmount = liquiditySupplyList[_id][msg.sender]\\r\\n            .liquidityAdded;\\r\\n\\r\\n        bool success = insuredToken.transferFrom(\\r\\n            address(this),\\r\\n            msg.sender,\\r\\n            withdrawAmount\\r\\n        );\\r\\n        if (success) {\\r\\n            poolDataList[_id].totalLiquidity -= withdrawAmount;\\r\\n        } else {\\r\\n            revert Errors.TransferFailed();\\r\\n        }\\r\\n\\r\\n        // check that he hasn't withdrawn yet\\r\\n        liquiditySupplyList[_id][msg.sender].liquidityWithdrawn = true;\\r\\n\\r\\n        emit PoolUpdated(\\r\\n            _id,\\r\\n            poolDataList[_id].tokenAddress,\\r\\n            poolDataList[_id].basePrice,\\r\\n            poolDataList[_id].insuranceTreshold,\\r\\n            poolDataList[_id].fee,\\r\\n            poolDataList[_id].totalLiquidity,\\r\\n            poolDataList[_id].startDate,\\r\\n            poolDataList[_id].endDate\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function requestInsurance(uint16 _id, uint256 _amount)\\r\\n        public\\r\\n        existPool(_id)\\r\\n    {\\r\\n        uint256 totalLiquidity = poolDataList[_id].totalLiquidity;\\r\\n\\r\\n        if (block.timestamp >= poolDataList[_id].startDate) {\\r\\n            revert Errors.InsuranceInActivePeriod();\\r\\n        }\\r\\n\\r\\n        uint256 tokenBalance = insuredToken.balanceOf(msg.sender);\\r\\n        if (tokenBalance < _amount) {\\r\\n            revert Errors.NotEnoughTokenBalance();\\r\\n        }\\r\\n\\r\\n        if (insuranceRequests[_id][msg.sender].liquidtyToInsure != 0) {\\r\\n            revert Errors.InsuranceAlreadyRequested();\\r\\n        }\\r\\n\\r\\n        DataTypes.InsuranceRequest memory insuranceRequest;\\r\\n\\r\\n        // calculating the fee and reimbursement amount\\r\\n        uint256 feeAmount = getUserFee(_id, _amount);\\r\\n        uint256 reimbursementAmount = getReimbursement(_id, _amount);\\r\\n        if (reimbursementAmount > totalLiquidity) {\\r\\n            revert Errors.NotEnoughInsuranceLiquidity();\\r\\n        }\\r\\n\\r\\n        bool success = insuredToken.transferFrom(\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            feeAmount\\r\\n        );\\r\\n\\r\\n        if (!success) {\\r\\n            revert Errors.TransferFailed();\\r\\n        }\\r\\n\\r\\n        insuranceRequest.id = _id;\\r\\n        insuranceRequest.insuranceRequester = msg.sender;\\r\\n        insuranceRequest.liquidtyToInsure = _amount;\\r\\n        insuranceRequest.reimbursementAmount = reimbursementAmount;\\r\\n        insuranceRequest.fee = feeAmount;\\r\\n\\r\\n        insuranceRequests[_id][msg.sender] = insuranceRequest;\\r\\n\\r\\n        emit InsuranceRequestCreated(\\r\\n            _id,\\r\\n            poolDataList[_id].tokenAddress,\\r\\n            msg.sender,\\r\\n            _amount,\\r\\n            feeAmount\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function requestReimbursement(uint16 _id) public existPool(_id) {\\r\\n        if (\\r\\n            block.timestamp <= poolDataList[_id].startDate ||\\r\\n            block.timestamp > poolDataList[_id].endDate\\r\\n        ) {\\r\\n            revert Errors.InsuranceInActivePeriod();\\r\\n        }\\r\\n\\r\\n        if (\\r\\n            insuranceRequests[_id][msg.sender].insuranceRequester != msg.sender\\r\\n        ) {\\r\\n            revert Errors.RequesterUnauthorized();\\r\\n        }\\r\\n\\r\\n        if (insuranceRequests[_id][msg.sender].reimbursementReceived == true) {\\r\\n            revert Errors.ReimburesementAlreadyReceived();\\r\\n        }\\r\\n\\r\\n        int256 tokenPrice = testTokenPrice;\\r\\n        if (tokenPrice > poolDataList[_id].insuranceTreshold) {\\r\\n            revert Errors.ReimburesementRequirementNotMet();\\r\\n        }\\r\\n\\r\\n        uint256 reimbursementAmount = insuranceRequests[_id][msg.sender]\\r\\n            .reimbursementAmount;\\r\\n        bool success = insuredToken.transferFrom(\\r\\n            address(this),\\r\\n            msg.sender,\\r\\n            reimbursementAmount\\r\\n        );\\r\\n        if (success) {\\r\\n            insuranceRequests[_id][msg.sender].liquidtyToInsure = 0;\\r\\n            insuranceRequests[_id][msg.sender].reimbursementReceived = true;\\r\\n        } else {\\r\\n            revert Errors.TransferFailed();\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xdf6e9a1d571e5ada8dcf067be155d777ea339e27889f7ec0a8cff664985ffc42\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052633b9aca0060015534801561001857600080fd5b5060008060006101000a81548161ffff021916908361ffff160217905550612ad9806100456000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806382c804dd1161008c578063ae3059ac11610066578063ae3059ac14610252578063af640d0f1461026e578063b307fc751461028c578063dca5ed48146102c4576100cf565b806382c804dd146101ea578063a4429eb514610206578063a5ff706b14610222576100cf565b80630ae2e871146100d45780631f563bfd146101075780633db0d614146101375780635fae9b921461015557806368c704a21461018a5780637bbece75146101ba575b600080fd5b6100ee60048036038101906100e99190611f4e565b6102e0565b6040516100fe9493929190611fe0565b60405180910390f35b610121600480360381019061011c91906120c0565b610358565b60405161012e919061224f565b60405180910390f35b61013f610742565b60405161014c919061227a565b60405180910390f35b61016f600480360381019061016a9190611f4e565b610748565b60405161018196959493929190612295565b60405180910390f35b6101a4600480360381019061019f91906122f6565b6107cc565b6040516101b19190612336565b60405180910390f35b6101d460048036038101906101cf91906122f6565b610849565b6040516101e19190612336565b60405180910390f35b61020460048036038101906101ff91906122f6565b610cc7565b005b610220600480360381019061021b9190612351565b611232565b005b61023c600480360381019061023791906122f6565b61123c565b6040516102499190612336565b60405180910390f35b61026c6004803603810190610267919061237e565b6112db565b005b610276611840565b60405161028391906123ab565b60405180910390f35b6102a660048036038101906102a1919061237e565b611852565b6040516102bb999897969594939291906123d5565b60405180910390f35b6102de60048036038101906102d9919061237e565b6118db565b005b6006602052816000526040600020602052806000526040600020600091509150508060000160009054906101000a900461ffff16908060000160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020160009054906101000a900460ff16905084565b610360611db2565b85600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555086600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555086600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060006001846104329190612491565b4261043d91906124eb565b9050600060018461044e9190612491565b4261045991906124eb565b9050818111610494576040517f14cc095100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61049c611db2565b600060015490506000896064836104b39190612570565b6104bd91906125da565b826104c891906126f1565b905060008054906101000a900461ffff16836000019061ffff16908161ffff1681525050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508983606001818152505081836080018181525050808360a0018181525050888360c0019060ff16908160ff1681525050848360e0018181525050838361010001818152505082600560008060009054906101000a900461ffff1661ffff1661ffff16815260200190815260200160002060008201518160000160006101000a81548161ffff021916908361ffff16021790555060208201518160000160026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010155606082015181600201556080820151816003015560a0820151816004015560c08201518160050160006101000a81548160ff021916908360ff16021790555060e0820151816006015561010082015181600701559050507f60208157873c458e968e0270eaeab9e1f660d5a1ce88ca3efe8ed007b366f7ec60008054906101000a900461ffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684848d60008b8b6040516106ef9897969594939291906127ca565b60405180910390a160016000808282829054906101000a900461ffff166107169190612848565b92506101000a81548161ffff021916908361ffff16021790555082955050505050509695505050505050565b60015481565b6007602052816000526040600020602052806000526040600020600091509150508060000160009054906101000a900461ffff16908060000160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154908060030154908060040160009054906101000a900460ff16905086565b600080600560008561ffff1661ffff1681526020019081526020016000206002015490506000816064856108009190612880565b61080a9190612491565b8461081591906128b1565b905060008185838761082791906128b1565b6108319190612491565b61083b9190612880565b905080935050505092915050565b60008260008054906101000a900461ffff1661ffff168161ffff16111561089c576040517f38e7d4f200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600560008561ffff1661ffff1681526020019081526020016000206006015442106108f3576040517fdb589d0800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6108fb611e1b565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330886040518463ffffffff1660e01b815260040161095c939291906128e5565b6020604051808303816000875af115801561097b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099f9190612948565b905080156109e15784600560008861ffff1661ffff16815260200190815260200160002060010160008282546109d591906124eb565b92505081905550610a13565b6040517f90b8ec1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b85826000019061ffff16908161ffff168152505033826020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508482604001818152505081600660008861ffff1661ffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548161ffff021916908361ffff16021790555060208201518160000160026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816001015560608201518160020160006101000a81548160ff0219169083151502179055509050507f60208157873c458e968e0270eaeab9e1f660d5a1ce88ca3efe8ed007b366f7ec86600560008961ffff1661ffff16815260200190815260200160002060000160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600560008a61ffff1661ffff16815260200190815260200160002060030154600560008b61ffff1661ffff16815260200190815260200160002060040154600560008c61ffff1661ffff16815260200190815260200160002060050160009054906101000a900460ff16600560008d61ffff1661ffff16815260200190815260200160002060010154600560008e61ffff1661ffff16815260200190815260200160002060060154600560008f61ffff1661ffff16815260200190815260200160002060070154604051610c95989796959493929190612975565b60405180910390a1600560008761ffff1661ffff16815260200190815260200160002060010154935050505092915050565b8160008054906101000a900461ffff1661ffff168161ffff161115610d18576040517f38e7d4f200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600560008561ffff1661ffff168152602001908152602001600020600101549050600560008561ffff1661ffff168152602001908152602001600020600601544210610d92576040517fdb589d0800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401610def91906129f3565b602060405180830381865afa158015610e0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e309190612a23565b905083811015610e6c576040517f5dd3b4d100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600760008761ffff1661ffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015414610f01576040517fc5ea839600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610f09611e5f565b6000610f15878761123c565b90506000610f2388886107cc565b905084811115610f5f576040517f3f735c4f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b8152600401610fc0939291906128e5565b6020604051808303816000875af1158015610fdf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110039190612948565b90508061103c576040517f90b8ec1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b88846000019061ffff16908161ffff168152505033846020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505087846040018181525050818460600181815250508284608001818152505083600760008b61ffff1661ffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548161ffff021916908361ffff16021790555060208201518160000160026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010155606082015181600201556080820151816003015560a08201518160040160006101000a81548160ff0219169083151502179055509050507f6f7b24a89bff54221f25713c015469512753a3c6491219a91c0ff35e7812190f89600560008c61ffff1661ffff16815260200190815260200160002060000160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff16338b8760405161121f959493929190612a50565b60405180910390a1505050505050505050565b8060018190555050565b600080600560008561ffff1661ffff1681526020019081526020016000206001015490506000600560008661ffff1661ffff16815260200190815260200160002060050160009054906101000a900460ff1660ff169050600060648261ffff16846112a79190612491565b6112b19190612880565b905060008382876112c29190612491565b6112cc9190612880565b90508094505050505092915050565b8060008054906101000a900461ffff1661ffff168161ffff16111561132c576040517f38e7d4f200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16600660008461ffff1661ffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461140c576040517fbbc5cb1100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600560008361ffff1661ffff168152602001908152602001600020600701544211611463576040517fdb589d0800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60011515600660008461ffff1661ffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff161515141561150a576040517f2aa0f38c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600660008461ffff1661ffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015490506000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3033856040518463ffffffff1660e01b81526004016115cb939291906128e5565b6020604051808303816000875af11580156115ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061160e9190612948565b905080156116505781600560008661ffff1661ffff168152602001908152602001600020600101600082825461164491906128b1565b92505081905550611682565b6040517f90b8ec1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600660008661ffff1661ffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160006101000a81548160ff0219169083151502179055507f60208157873c458e968e0270eaeab9e1f660d5a1ce88ca3efe8ed007b366f7ec84600560008761ffff1661ffff16815260200190815260200160002060000160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600560008861ffff1661ffff16815260200190815260200160002060030154600560008961ffff1661ffff16815260200190815260200160002060040154600560008a61ffff1661ffff16815260200190815260200160002060050160009054906101000a900460ff16600560008b61ffff1661ffff16815260200190815260200160002060010154600560008c61ffff1661ffff16815260200190815260200160002060060154600560008d61ffff1661ffff16815260200190815260200160002060070154604051611832989796959493929190612975565b60405180910390a150505050565b60008054906101000a900461ffff1681565b60056020528060005260406000206000915090508060000160009054906101000a900461ffff16908060000160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154908060030154908060040154908060050160009054906101000a900460ff16908060060154908060070154905089565b8060008054906101000a900461ffff1661ffff168161ffff16111561192c576040517f38e7d4f200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600560008361ffff1661ffff16815260200190815260200160002060060154421115806119765750600560008361ffff1661ffff1681526020019081526020016000206007015442115b156119ad576040517fdb589d0800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16600760008461ffff1661ffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611a8d576040517fbbc5cb1100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60011515600760008461ffff1661ffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160009054906101000a900460ff1615151415611b34576040517ffa43322000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006001549050600560008461ffff1661ffff16815260200190815260200160002060040154811315611b93576040517ff65ecfbb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600760008561ffff1661ffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015490506000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3033856040518463ffffffff1660e01b8152600401611c54939291906128e5565b6020604051808303816000875af1158015611c73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c979190612948565b90508015611d79576000600760008761ffff1661ffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055506001600760008761ffff1661ffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160006101000a81548160ff021916908315150217905550611dab565b6040517f90b8ec1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505050565b604051806101200160405280600061ffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000815260200160008152602001600060ff16815260200160008152602001600081525090565b6040518060800160405280600061ffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000151581525090565b6040518060c00160405280600061ffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600081526020016000151581525090565b600080fd5b600061ffff82169050919050565b611ecd81611eb6565b8114611ed857600080fd5b50565b600081359050611eea81611ec4565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611f1b82611ef0565b9050919050565b611f2b81611f10565b8114611f3657600080fd5b50565b600081359050611f4881611f22565b92915050565b60008060408385031215611f6557611f64611eb1565b5b6000611f7385828601611edb565b9250506020611f8485828601611f39565b9150509250929050565b611f9781611eb6565b82525050565b611fa681611f10565b82525050565b6000819050919050565b611fbf81611fac565b82525050565b60008115159050919050565b611fda81611fc5565b82525050565b6000608082019050611ff56000830187611f8e565b6120026020830186611f9d565b61200f6040830185611fb6565b61201c6060830184611fd1565b95945050505050565b6000819050919050565b61203881612025565b811461204357600080fd5b50565b6000813590506120558161202f565b92915050565b600060ff82169050919050565b6120718161205b565b811461207c57600080fd5b50565b60008135905061208e81612068565b92915050565b61209d81611fac565b81146120a857600080fd5b50565b6000813590506120ba81612094565b92915050565b60008060008060008060c087890312156120dd576120dc611eb1565b5b60006120eb89828a01611f39565b96505060206120fc89828a01611f39565b955050604061210d89828a01612046565b945050606061211e89828a0161207f565b935050608061212f89828a016120ab565b92505060a061214089828a016120ab565b9150509295509295509295565b61215681611eb6565b82525050565b61216581611f10565b82525050565b61217481611fac565b82525050565b61218381612025565b82525050565b6121928161205b565b82525050565b610120820160008201516121af600085018261214d565b5060208201516121c2602085018261215c565b5060408201516121d5604085018261216b565b5060608201516121e8606085018261216b565b5060808201516121fb608085018261217a565b5060a082015161220e60a085018261217a565b5060c082015161222160c0850182612189565b5060e082015161223460e085018261216b565b5061010082015161224961010085018261216b565b50505050565b6000610120820190506122656000830184612198565b92915050565b61227481612025565b82525050565b600060208201905061228f600083018461226b565b92915050565b600060c0820190506122aa6000830189611f8e565b6122b76020830188611f9d565b6122c46040830187611fb6565b6122d16060830186611fb6565b6122de6080830185611fb6565b6122eb60a0830184611fd1565b979650505050505050565b6000806040838503121561230d5761230c611eb1565b5b600061231b85828601611edb565b925050602061232c858286016120ab565b9150509250929050565b600060208201905061234b6000830184611fb6565b92915050565b60006020828403121561236757612366611eb1565b5b600061237584828501612046565b91505092915050565b60006020828403121561239457612393611eb1565b5b60006123a284828501611edb565b91505092915050565b60006020820190506123c06000830184611f8e565b92915050565b6123cf8161205b565b82525050565b6000610120820190506123eb600083018c611f8e565b6123f8602083018b611f9d565b612405604083018a611fb6565b6124126060830189611fb6565b61241f608083018861226b565b61242c60a083018761226b565b61243960c08301866123c6565b61244660e0830185611fb6565b612454610100830184611fb6565b9a9950505050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061249c82611fac565b91506124a783611fac565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156124e0576124df612462565b5b828202905092915050565b60006124f682611fac565b915061250183611fac565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561253657612535612462565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061257b82612025565b915061258683612025565b92508261259657612595612541565b5b600160000383147f8000000000000000000000000000000000000000000000000000000000000000831416156125cf576125ce612462565b5b828205905092915050565b60006125e582612025565b91506125f083612025565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561262f5761262e612462565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561266c5761266b612462565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156126a9576126a8612462565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156126e6576126e5612462565b5b828202905092915050565b60006126fc82612025565b915061270783612025565b9250827f80000000000000000000000000000000000000000000000000000000000000000182126000841215161561274257612741612462565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01821360008412161561277a57612779612462565b5b828203905092915050565b6000819050919050565b6000819050919050565b60006127b46127af6127aa84612785565b61278f565b611fac565b9050919050565b6127c481612799565b82525050565b6000610100820190506127e0600083018b611f8e565b6127ed602083018a611f9d565b6127fa604083018961226b565b612807606083018861226b565b61281460808301876123c6565b61282160a08301866127bb565b61282e60c0830185611fb6565b61283b60e0830184611fb6565b9998505050505050505050565b600061285382611eb6565b915061285e83611eb6565b92508261ffff0382111561287557612874612462565b5b828201905092915050565b600061288b82611fac565b915061289683611fac565b9250826128a6576128a5612541565b5b828204905092915050565b60006128bc82611fac565b91506128c783611fac565b9250828210156128da576128d9612462565b5b828203905092915050565b60006060820190506128fa6000830186611f9d565b6129076020830185611f9d565b6129146040830184611fb6565b949350505050565b61292581611fc5565b811461293057600080fd5b50565b6000815190506129428161291c565b92915050565b60006020828403121561295e5761295d611eb1565b5b600061296c84828501612933565b91505092915050565b60006101008201905061298b600083018b611f8e565b612998602083018a611f9d565b6129a5604083018961226b565b6129b2606083018861226b565b6129bf60808301876123c6565b6129cc60a0830186611fb6565b6129d960c0830185611fb6565b6129e660e0830184611fb6565b9998505050505050505050565b6000602082019050612a086000830184611f9d565b92915050565b600081519050612a1d81612094565b92915050565b600060208284031215612a3957612a38611eb1565b5b6000612a4784828501612a0e565b91505092915050565b600060a082019050612a656000830188611f8e565b612a726020830187611f9d565b612a7f6040830186611f9d565b612a8c6060830185611fb6565b612a996080830184611fb6565b969550505050505056fea264697066735822122030865c42b2a8cdbba5a0f86fbc88db7365090f6186638f0a27ce1574213453b164736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c806382c804dd1161008c578063ae3059ac11610066578063ae3059ac14610252578063af640d0f1461026e578063b307fc751461028c578063dca5ed48146102c4576100cf565b806382c804dd146101ea578063a4429eb514610206578063a5ff706b14610222576100cf565b80630ae2e871146100d45780631f563bfd146101075780633db0d614146101375780635fae9b921461015557806368c704a21461018a5780637bbece75146101ba575b600080fd5b6100ee60048036038101906100e99190611f4e565b6102e0565b6040516100fe9493929190611fe0565b60405180910390f35b610121600480360381019061011c91906120c0565b610358565b60405161012e919061224f565b60405180910390f35b61013f610742565b60405161014c919061227a565b60405180910390f35b61016f600480360381019061016a9190611f4e565b610748565b60405161018196959493929190612295565b60405180910390f35b6101a4600480360381019061019f91906122f6565b6107cc565b6040516101b19190612336565b60405180910390f35b6101d460048036038101906101cf91906122f6565b610849565b6040516101e19190612336565b60405180910390f35b61020460048036038101906101ff91906122f6565b610cc7565b005b610220600480360381019061021b9190612351565b611232565b005b61023c600480360381019061023791906122f6565b61123c565b6040516102499190612336565b60405180910390f35b61026c6004803603810190610267919061237e565b6112db565b005b610276611840565b60405161028391906123ab565b60405180910390f35b6102a660048036038101906102a1919061237e565b611852565b6040516102bb999897969594939291906123d5565b60405180910390f35b6102de60048036038101906102d9919061237e565b6118db565b005b6006602052816000526040600020602052806000526040600020600091509150508060000160009054906101000a900461ffff16908060000160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020160009054906101000a900460ff16905084565b610360611db2565b85600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555086600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555086600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060006001846104329190612491565b4261043d91906124eb565b9050600060018461044e9190612491565b4261045991906124eb565b9050818111610494576040517f14cc095100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61049c611db2565b600060015490506000896064836104b39190612570565b6104bd91906125da565b826104c891906126f1565b905060008054906101000a900461ffff16836000019061ffff16908161ffff1681525050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508983606001818152505081836080018181525050808360a0018181525050888360c0019060ff16908160ff1681525050848360e0018181525050838361010001818152505082600560008060009054906101000a900461ffff1661ffff1661ffff16815260200190815260200160002060008201518160000160006101000a81548161ffff021916908361ffff16021790555060208201518160000160026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010155606082015181600201556080820151816003015560a0820151816004015560c08201518160050160006101000a81548160ff021916908360ff16021790555060e0820151816006015561010082015181600701559050507f60208157873c458e968e0270eaeab9e1f660d5a1ce88ca3efe8ed007b366f7ec60008054906101000a900461ffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684848d60008b8b6040516106ef9897969594939291906127ca565b60405180910390a160016000808282829054906101000a900461ffff166107169190612848565b92506101000a81548161ffff021916908361ffff16021790555082955050505050509695505050505050565b60015481565b6007602052816000526040600020602052806000526040600020600091509150508060000160009054906101000a900461ffff16908060000160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154908060030154908060040160009054906101000a900460ff16905086565b600080600560008561ffff1661ffff1681526020019081526020016000206002015490506000816064856108009190612880565b61080a9190612491565b8461081591906128b1565b905060008185838761082791906128b1565b6108319190612491565b61083b9190612880565b905080935050505092915050565b60008260008054906101000a900461ffff1661ffff168161ffff16111561089c576040517f38e7d4f200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600560008561ffff1661ffff1681526020019081526020016000206006015442106108f3576040517fdb589d0800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6108fb611e1b565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330886040518463ffffffff1660e01b815260040161095c939291906128e5565b6020604051808303816000875af115801561097b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099f9190612948565b905080156109e15784600560008861ffff1661ffff16815260200190815260200160002060010160008282546109d591906124eb565b92505081905550610a13565b6040517f90b8ec1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b85826000019061ffff16908161ffff168152505033826020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508482604001818152505081600660008861ffff1661ffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548161ffff021916908361ffff16021790555060208201518160000160026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816001015560608201518160020160006101000a81548160ff0219169083151502179055509050507f60208157873c458e968e0270eaeab9e1f660d5a1ce88ca3efe8ed007b366f7ec86600560008961ffff1661ffff16815260200190815260200160002060000160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600560008a61ffff1661ffff16815260200190815260200160002060030154600560008b61ffff1661ffff16815260200190815260200160002060040154600560008c61ffff1661ffff16815260200190815260200160002060050160009054906101000a900460ff16600560008d61ffff1661ffff16815260200190815260200160002060010154600560008e61ffff1661ffff16815260200190815260200160002060060154600560008f61ffff1661ffff16815260200190815260200160002060070154604051610c95989796959493929190612975565b60405180910390a1600560008761ffff1661ffff16815260200190815260200160002060010154935050505092915050565b8160008054906101000a900461ffff1661ffff168161ffff161115610d18576040517f38e7d4f200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600560008561ffff1661ffff168152602001908152602001600020600101549050600560008561ffff1661ffff168152602001908152602001600020600601544210610d92576040517fdb589d0800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401610def91906129f3565b602060405180830381865afa158015610e0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e309190612a23565b905083811015610e6c576040517f5dd3b4d100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600760008761ffff1661ffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015414610f01576040517fc5ea839600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610f09611e5f565b6000610f15878761123c565b90506000610f2388886107cc565b905084811115610f5f576040517f3f735c4f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b8152600401610fc0939291906128e5565b6020604051808303816000875af1158015610fdf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110039190612948565b90508061103c576040517f90b8ec1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b88846000019061ffff16908161ffff168152505033846020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505087846040018181525050818460600181815250508284608001818152505083600760008b61ffff1661ffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548161ffff021916908361ffff16021790555060208201518160000160026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010155606082015181600201556080820151816003015560a08201518160040160006101000a81548160ff0219169083151502179055509050507f6f7b24a89bff54221f25713c015469512753a3c6491219a91c0ff35e7812190f89600560008c61ffff1661ffff16815260200190815260200160002060000160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff16338b8760405161121f959493929190612a50565b60405180910390a1505050505050505050565b8060018190555050565b600080600560008561ffff1661ffff1681526020019081526020016000206001015490506000600560008661ffff1661ffff16815260200190815260200160002060050160009054906101000a900460ff1660ff169050600060648261ffff16846112a79190612491565b6112b19190612880565b905060008382876112c29190612491565b6112cc9190612880565b90508094505050505092915050565b8060008054906101000a900461ffff1661ffff168161ffff16111561132c576040517f38e7d4f200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16600660008461ffff1661ffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461140c576040517fbbc5cb1100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600560008361ffff1661ffff168152602001908152602001600020600701544211611463576040517fdb589d0800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60011515600660008461ffff1661ffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff161515141561150a576040517f2aa0f38c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600660008461ffff1661ffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015490506000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3033856040518463ffffffff1660e01b81526004016115cb939291906128e5565b6020604051808303816000875af11580156115ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061160e9190612948565b905080156116505781600560008661ffff1661ffff168152602001908152602001600020600101600082825461164491906128b1565b92505081905550611682565b6040517f90b8ec1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600660008661ffff1661ffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160006101000a81548160ff0219169083151502179055507f60208157873c458e968e0270eaeab9e1f660d5a1ce88ca3efe8ed007b366f7ec84600560008761ffff1661ffff16815260200190815260200160002060000160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600560008861ffff1661ffff16815260200190815260200160002060030154600560008961ffff1661ffff16815260200190815260200160002060040154600560008a61ffff1661ffff16815260200190815260200160002060050160009054906101000a900460ff16600560008b61ffff1661ffff16815260200190815260200160002060010154600560008c61ffff1661ffff16815260200190815260200160002060060154600560008d61ffff1661ffff16815260200190815260200160002060070154604051611832989796959493929190612975565b60405180910390a150505050565b60008054906101000a900461ffff1681565b60056020528060005260406000206000915090508060000160009054906101000a900461ffff16908060000160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154908060030154908060040154908060050160009054906101000a900460ff16908060060154908060070154905089565b8060008054906101000a900461ffff1661ffff168161ffff16111561192c576040517f38e7d4f200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600560008361ffff1661ffff16815260200190815260200160002060060154421115806119765750600560008361ffff1661ffff1681526020019081526020016000206007015442115b156119ad576040517fdb589d0800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16600760008461ffff1661ffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611a8d576040517fbbc5cb1100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60011515600760008461ffff1661ffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160009054906101000a900460ff1615151415611b34576040517ffa43322000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006001549050600560008461ffff1661ffff16815260200190815260200160002060040154811315611b93576040517ff65ecfbb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600760008561ffff1661ffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015490506000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3033856040518463ffffffff1660e01b8152600401611c54939291906128e5565b6020604051808303816000875af1158015611c73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c979190612948565b90508015611d79576000600760008761ffff1661ffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055506001600760008761ffff1661ffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160006101000a81548160ff021916908315150217905550611dab565b6040517f90b8ec1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505050565b604051806101200160405280600061ffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000815260200160008152602001600060ff16815260200160008152602001600081525090565b6040518060800160405280600061ffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000151581525090565b6040518060c00160405280600061ffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600081526020016000151581525090565b600080fd5b600061ffff82169050919050565b611ecd81611eb6565b8114611ed857600080fd5b50565b600081359050611eea81611ec4565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611f1b82611ef0565b9050919050565b611f2b81611f10565b8114611f3657600080fd5b50565b600081359050611f4881611f22565b92915050565b60008060408385031215611f6557611f64611eb1565b5b6000611f7385828601611edb565b9250506020611f8485828601611f39565b9150509250929050565b611f9781611eb6565b82525050565b611fa681611f10565b82525050565b6000819050919050565b611fbf81611fac565b82525050565b60008115159050919050565b611fda81611fc5565b82525050565b6000608082019050611ff56000830187611f8e565b6120026020830186611f9d565b61200f6040830185611fb6565b61201c6060830184611fd1565b95945050505050565b6000819050919050565b61203881612025565b811461204357600080fd5b50565b6000813590506120558161202f565b92915050565b600060ff82169050919050565b6120718161205b565b811461207c57600080fd5b50565b60008135905061208e81612068565b92915050565b61209d81611fac565b81146120a857600080fd5b50565b6000813590506120ba81612094565b92915050565b60008060008060008060c087890312156120dd576120dc611eb1565b5b60006120eb89828a01611f39565b96505060206120fc89828a01611f39565b955050604061210d89828a01612046565b945050606061211e89828a0161207f565b935050608061212f89828a016120ab565b92505060a061214089828a016120ab565b9150509295509295509295565b61215681611eb6565b82525050565b61216581611f10565b82525050565b61217481611fac565b82525050565b61218381612025565b82525050565b6121928161205b565b82525050565b610120820160008201516121af600085018261214d565b5060208201516121c2602085018261215c565b5060408201516121d5604085018261216b565b5060608201516121e8606085018261216b565b5060808201516121fb608085018261217a565b5060a082015161220e60a085018261217a565b5060c082015161222160c0850182612189565b5060e082015161223460e085018261216b565b5061010082015161224961010085018261216b565b50505050565b6000610120820190506122656000830184612198565b92915050565b61227481612025565b82525050565b600060208201905061228f600083018461226b565b92915050565b600060c0820190506122aa6000830189611f8e565b6122b76020830188611f9d565b6122c46040830187611fb6565b6122d16060830186611fb6565b6122de6080830185611fb6565b6122eb60a0830184611fd1565b979650505050505050565b6000806040838503121561230d5761230c611eb1565b5b600061231b85828601611edb565b925050602061232c858286016120ab565b9150509250929050565b600060208201905061234b6000830184611fb6565b92915050565b60006020828403121561236757612366611eb1565b5b600061237584828501612046565b91505092915050565b60006020828403121561239457612393611eb1565b5b60006123a284828501611edb565b91505092915050565b60006020820190506123c06000830184611f8e565b92915050565b6123cf8161205b565b82525050565b6000610120820190506123eb600083018c611f8e565b6123f8602083018b611f9d565b612405604083018a611fb6565b6124126060830189611fb6565b61241f608083018861226b565b61242c60a083018761226b565b61243960c08301866123c6565b61244660e0830185611fb6565b612454610100830184611fb6565b9a9950505050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061249c82611fac565b91506124a783611fac565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156124e0576124df612462565b5b828202905092915050565b60006124f682611fac565b915061250183611fac565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561253657612535612462565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061257b82612025565b915061258683612025565b92508261259657612595612541565b5b600160000383147f8000000000000000000000000000000000000000000000000000000000000000831416156125cf576125ce612462565b5b828205905092915050565b60006125e582612025565b91506125f083612025565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561262f5761262e612462565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561266c5761266b612462565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156126a9576126a8612462565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156126e6576126e5612462565b5b828202905092915050565b60006126fc82612025565b915061270783612025565b9250827f80000000000000000000000000000000000000000000000000000000000000000182126000841215161561274257612741612462565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01821360008412161561277a57612779612462565b5b828203905092915050565b6000819050919050565b6000819050919050565b60006127b46127af6127aa84612785565b61278f565b611fac565b9050919050565b6127c481612799565b82525050565b6000610100820190506127e0600083018b611f8e565b6127ed602083018a611f9d565b6127fa604083018961226b565b612807606083018861226b565b61281460808301876123c6565b61282160a08301866127bb565b61282e60c0830185611fb6565b61283b60e0830184611fb6565b9998505050505050505050565b600061285382611eb6565b915061285e83611eb6565b92508261ffff0382111561287557612874612462565b5b828201905092915050565b600061288b82611fac565b915061289683611fac565b9250826128a6576128a5612541565b5b828204905092915050565b60006128bc82611fac565b91506128c783611fac565b9250828210156128da576128d9612462565b5b828203905092915050565b60006060820190506128fa6000830186611f9d565b6129076020830185611f9d565b6129146040830184611fb6565b949350505050565b61292581611fc5565b811461293057600080fd5b50565b6000815190506129428161291c565b92915050565b60006020828403121561295e5761295d611eb1565b5b600061296c84828501612933565b91505092915050565b60006101008201905061298b600083018b611f8e565b612998602083018a611f9d565b6129a5604083018961226b565b6129b2606083018861226b565b6129bf60808301876123c6565b6129cc60a0830186611fb6565b6129d960c0830185611fb6565b6129e660e0830184611fb6565b9998505050505050505050565b6000602082019050612a086000830184611f9d565b92915050565b600081519050612a1d81612094565b92915050565b600060208284031215612a3957612a38611eb1565b5b6000612a4784828501612a0e565b91505092915050565b600060a082019050612a656000830188611f8e565b612a726020830187611f9d565b612a7f6040830186611f9d565b612a8c6060830185611fb6565b612a996080830184611fb6565b969550505050505056fea264697066735822122030865c42b2a8cdbba5a0f86fbc88db7365090f6186638f0a27ce1574213453b164736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 203,
        "contract": "contracts/test/Test_MacInsuranceMain.sol:Test_MacInsuranceMain",
        "label": "id",
        "offset": 0,
        "slot": "0",
        "type": "t_uint16"
      },
      {
        "astId": 206,
        "contract": "contracts/test/Test_MacInsuranceMain.sol:Test_MacInsuranceMain",
        "label": "testTokenPrice",
        "offset": 0,
        "slot": "1",
        "type": "t_int256"
      },
      {
        "astId": 208,
        "contract": "contracts/test/Test_MacInsuranceMain.sol:Test_MacInsuranceMain",
        "label": "tokenAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 211,
        "contract": "contracts/test/Test_MacInsuranceMain.sol:Test_MacInsuranceMain",
        "label": "priceFeed",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 214,
        "contract": "contracts/test/Test_MacInsuranceMain.sol:Test_MacInsuranceMain",
        "label": "insuredToken",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IERC20)123"
      },
      {
        "astId": 219,
        "contract": "contracts/test/Test_MacInsuranceMain.sol:Test_MacInsuranceMain",
        "label": "poolDataList",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint16,t_struct(PoolData)144_storage)"
      },
      {
        "astId": 226,
        "contract": "contracts/test/Test_MacInsuranceMain.sol:Test_MacInsuranceMain",
        "label": "liquiditySupplyList",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint16,t_mapping(t_address,t_struct(PoolLiquiditySupply)153_storage))"
      },
      {
        "astId": 233,
        "contract": "contracts/test/Test_MacInsuranceMain.sol:Test_MacInsuranceMain",
        "label": "insuranceRequests",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint16,t_mapping(t_address,t_struct(InsuranceRequest)166_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)123": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(InsuranceRequest)166_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DataTypes.InsuranceRequest)",
        "numberOfBytes": "32",
        "value": "t_struct(InsuranceRequest)166_storage"
      },
      "t_mapping(t_address,t_struct(PoolLiquiditySupply)153_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DataTypes.PoolLiquiditySupply)",
        "numberOfBytes": "32",
        "value": "t_struct(PoolLiquiditySupply)153_storage"
      },
      "t_mapping(t_uint16,t_mapping(t_address,t_struct(InsuranceRequest)166_storage))": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => mapping(address => struct DataTypes.InsuranceRequest))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(InsuranceRequest)166_storage)"
      },
      "t_mapping(t_uint16,t_mapping(t_address,t_struct(PoolLiquiditySupply)153_storage))": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => mapping(address => struct DataTypes.PoolLiquiditySupply))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(PoolLiquiditySupply)153_storage)"
      },
      "t_mapping(t_uint16,t_struct(PoolData)144_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => struct DataTypes.PoolData)",
        "numberOfBytes": "32",
        "value": "t_struct(PoolData)144_storage"
      },
      "t_struct(InsuranceRequest)166_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.InsuranceRequest",
        "members": [
          {
            "astId": 155,
            "contract": "contracts/test/Test_MacInsuranceMain.sol:Test_MacInsuranceMain",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 157,
            "contract": "contracts/test/Test_MacInsuranceMain.sol:Test_MacInsuranceMain",
            "label": "insuranceRequester",
            "offset": 2,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 159,
            "contract": "contracts/test/Test_MacInsuranceMain.sol:Test_MacInsuranceMain",
            "label": "liquidtyToInsure",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 161,
            "contract": "contracts/test/Test_MacInsuranceMain.sol:Test_MacInsuranceMain",
            "label": "reimbursementAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 163,
            "contract": "contracts/test/Test_MacInsuranceMain.sol:Test_MacInsuranceMain",
            "label": "fee",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 165,
            "contract": "contracts/test/Test_MacInsuranceMain.sol:Test_MacInsuranceMain",
            "label": "reimbursementReceived",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(PoolData)144_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.PoolData",
        "members": [
          {
            "astId": 127,
            "contract": "contracts/test/Test_MacInsuranceMain.sol:Test_MacInsuranceMain",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 129,
            "contract": "contracts/test/Test_MacInsuranceMain.sol:Test_MacInsuranceMain",
            "label": "tokenAddress",
            "offset": 2,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 131,
            "contract": "contracts/test/Test_MacInsuranceMain.sol:Test_MacInsuranceMain",
            "label": "totalLiquidity",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 133,
            "contract": "contracts/test/Test_MacInsuranceMain.sol:Test_MacInsuranceMain",
            "label": "priceLossCover",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 135,
            "contract": "contracts/test/Test_MacInsuranceMain.sol:Test_MacInsuranceMain",
            "label": "basePrice",
            "offset": 0,
            "slot": "3",
            "type": "t_int256"
          },
          {
            "astId": 137,
            "contract": "contracts/test/Test_MacInsuranceMain.sol:Test_MacInsuranceMain",
            "label": "insuranceTreshold",
            "offset": 0,
            "slot": "4",
            "type": "t_int256"
          },
          {
            "astId": 139,
            "contract": "contracts/test/Test_MacInsuranceMain.sol:Test_MacInsuranceMain",
            "label": "fee",
            "offset": 0,
            "slot": "5",
            "type": "t_uint8"
          },
          {
            "astId": 141,
            "contract": "contracts/test/Test_MacInsuranceMain.sol:Test_MacInsuranceMain",
            "label": "startDate",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 143,
            "contract": "contracts/test/Test_MacInsuranceMain.sol:Test_MacInsuranceMain",
            "label": "endDate",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(PoolLiquiditySupply)153_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.PoolLiquiditySupply",
        "members": [
          {
            "astId": 146,
            "contract": "contracts/test/Test_MacInsuranceMain.sol:Test_MacInsuranceMain",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 148,
            "contract": "contracts/test/Test_MacInsuranceMain.sol:Test_MacInsuranceMain",
            "label": "liquidityProvider",
            "offset": 2,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 150,
            "contract": "contracts/test/Test_MacInsuranceMain.sol:Test_MacInsuranceMain",
            "label": "liquidityAdded",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 152,
            "contract": "contracts/test/Test_MacInsuranceMain.sol:Test_MacInsuranceMain",
            "label": "liquidityWithdrawn",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}